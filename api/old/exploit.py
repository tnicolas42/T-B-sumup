import sys
import pprint
import unidecode
import dateutil.parser

pp = pprint.PrettyPrinter(indent=4)

def exploit(items):
    """
    2 x CASH 4 Cookie
    1 x CB 2 Verre Jus, 1 x CB 4 Cookie
    
    """
    result = {
        "total_amount": { "brut": 0, "net": 0 },
        "amount": {
            "CASH": { "brut": 0, "net": 0 },
            "CB": { "brut": 0, "net": 0 },
            "PMK": { "brut": 0, "net": 0 },
        },
        "categories": {},
        "repas_date": {},
        "nb_transactions": 0,
    }

    for it in items:
        result["total_amount"]["brut"] += it["amount"]
        result["nb_transactions"] += 1

        date_transaction = dateutil.parser.parse(it["local_time"]).strftime("%y/%m/%d")
        prod = it['product_summary']
        prod = prod.split(',')
        for p in prod:
            p2 = p.split(" x ")
            nb = int(p2[0].strip())
            if p2[1].strip() == 'Custom amount':
                name = p2[1]
                if it['payment_type'] == 'CASH':
                    cat = "CASH"
                else:
                    cat = "CB"
            else:
                pp2 = p2[1].split(' ')
                cat = pp2[0].strip()
                if cat in result["amount"]:
                    try:
                        int(pp2[1])
                        name = ' '.join(pp2[2:])
                    except ValueError:
                        name = ' '.join(pp2[1:])
                else:
                    if it['payment_type'] == 'CASH':
                        cat = "CASH"
                    else:
                        cat = "CB"
                    name = p2[1]
            name = name.strip().lower()
            name = unidecode.unidecode(name)
            if name in result["categories"]:
                result["categories"][name] += nb
            else:
                result["categories"][name] = nb

            if "repas" in name:
                if date_transaction in result["repas_date"]:
                    result["repas_date"][date_transaction] += nb
                else:
                    result["repas_date"][date_transaction] = nb
        result["amount"][cat]["brut"] += it['amount']


    result["amount"]["CB"]["brut"] = round(result["amount"]["CB"]["brut"], 2)
    result["amount"]["PMK"]["brut"] = round(result["amount"]["PMK"]["brut"], 2)
    result["amount"]["CASH"]["brut"] = round(result["amount"]["CASH"]["brut"], 2)

    result["amount"]["CB"]["net"] = round(result["amount"]["CB"]["brut"] * (1-0.015), 2)
    result["amount"]["PMK"]["net"] = round(result["amount"]["PMK"]["brut"] * (1-0.007), 2)
    result["amount"]["CASH"]["net"] = round(result["amount"]["CASH"]["brut"], 2)

    result["total_amount"]["brut"] = round(result["amount"]["CB"]["brut"] \
                                    + result["amount"]["PMK"]["brut"] \
                                    + result["amount"]["CASH"]["brut"], 2)

    result["total_amount"]["net"] = round(result["amount"]["CB"]["net"] \
                                    + result["amount"]["PMK"]["net"] \
                                    + result["amount"]["CASH"]["net"], 2)

    return result

if __name__ == "__main__":
    import json
    file = 'result.json'
    if len(sys.argv) > 1:
        file = sys.argv[1]
    with open(file, 'r') as f:
        items = json.load(f)
        result = exploit(items)
        pp.pprint(result)